package pages;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertNotEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertThat;
import static org.hamcrest.core.AllOf.allOf;
import static org.hamcrest.Matchers.lessThanOrEqualTo;
import static org.hamcrest.Matchers.greaterThanOrEqualTo;

import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeFormatterBuilder;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.concurrent.TimeUnit;

import org.hamcrest.core.AllOf;
import org.junit.Before;
import org.openqa.selenium.By;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;
import pages.dsl;
import io.cucumber.java.After;

public class EnterVehicledataPage extends BaseClases {

	// Aba Vehicle
	private By ClickMenuAtomobilie = By.id("nav_automobile");
	private By abaEnterVehicleData = By.id("entervehicledata");
	private By make = By.id("make");
	private By enginePerformace = By.id("engineperformance");
	private By model = By.id("model");
	private By dateOfManufacture = By.id("dateofmanufacture");
	private By numberOfSeats = By.id("numberofseats");
	private By fuelType = By.id("fuel");
	private By listPrice = By.id("listprice");
	private By licensePlateNumber = By.id("licenseplatenumber");
	private By annualmileage = By.id("annualmileage");
	private By nextEnterInsurantdata = By.id("nextenterinsurantdata");

	// aba Enter Insurant Data
	private By EnterInsurantData = By.id("enterinsurantdata");
	private By firstName = By.id("firstname");
	private By lastName = By.id("lastname");
	private By dateBirth = By.id("birthdate");
	private By groupgender = By.xpath("//label[contains(.,'Male')]");
	private By streetAddress = By.id("streetaddress");
	private By country = By.id("country");
	private By zipCode = By.id("zipcode");
	private By city = By.id("city");
	private By occupation = By.id("occupation");
	private By groupHobbies = By.xpath("//div[10]/p");
	private By website = By.id("website");
	private By picture = By.id("picture");
	private By nextEnterProductdata = By.id("nextenterproductdata");

	// Aba Enter Product data

	private By startDate = By.id("startdate");
	private By insuranceSum = By.id("insurancesum");
	private By meritRating = By.id("meritrating");
	private By damageInsurance = By.id("damageinsurance");
	private By GroupOptionalProduct = By.xpath("//div[5]/p");
	private By courtesyCar = By.id("courtesycar");
	private By nextSelectpriceOption = By.id("nextselectpriceoption");

	// Aba Select price Option

	private By table = By.id("priceTable");
	private By nextSendquote = By.id("nextsendquote");

	// Send Quote
	private By email = By.id("email");
	private By phone = By.id("phone");
	private By userName = By.id("username");
	private By password = By.id("password");
	private By confirmPassword = By.id("confirmpassword");
	private By comments = By.id("Comments");
	private By sendEmail = By.id("sendemail");
	private By mensagem = By.cssSelector("body > div.sweet-alert.showSweetAlert.visible > h2");

	@Before
	public void openPage() {
		setDriver();
		navegateTo();
	

	}

	// entervehicledata
	public void clickAutomobile() {
		driver.findElement(ClickMenuAtomobilie).click();
	}

	public void getOptionSelectMake(String opcao) {
		driver.findElement(make).findElements(By.tagName("option")).get(1).click();

	}

	public void typeEnginePerformace(String kw) {
		assertThat(Integer.parseInt(kw), allOf(greaterThanOrEqualTo(1), lessThanOrEqualTo(2000)));
		dsl.write(enginePerformace, kw);

	}

	public void setDateManufacture(String date) {

		DateFormat dateFormat = new SimpleDateFormat("MM/dd/yyyy");
		DateFormat df = new SimpleDateFormat("MM/dd/yyyy");
		Calendar cal = Calendar.getInstance();
		dateFormat.format(cal.getTime());

		try {
			// String to data parameter
			assertThat(df.parse(date), allOf(lessThanOrEqualTo(cal.getTime())));
			dsl.write(dateOfManufacture, date);
		} catch (ParseException e) {

		}

	}

	public void selectNumberSeats(int seat) {
		driver.findElement(numberOfSeats).findElements(By.tagName("option")).get(seat).click();
	}

	public void selectFuelType(String fueltype) {
		driver.findElement(fuelType).findElements(By.tagName("option")).get(1).click();
	}

	public void typeListPrice(String price) {
		dsl.write(listPrice, price);
	}

	public void typeLicenseNumber(String license) {
		dsl.write(licensePlateNumber, license);
	}

	public void typeAnnualMileage(Integer mileage) {
		dsl.write(annualmileage, mileage.toString());
		
	}

	public void nextPage() {
		driver.findElement(nextEnterInsurantdata).click();
	}

	// Insurant data

	public void validateNextpage() {
		driver.findElement(By.id("enterinsurantdata")).getText();
	}

	public void confirmPage() {

		driver.findElement(EnterInsurantData).click();
	}

	public void typeFistname(String name) {
		dsl.write(firstName, name);
	}

	public void typeLastName(String lastname) {
		dsl.write(lastName, lastname);
		
	}

	public void typeDateBirth(String birth) {
		dsl.write(dateBirth, birth);
	}

	public void selectGender(String gender) {
		driver.findElement(By.xpath("//label[contains(.,'" + gender + "')]")).click();

	}

	public void typeStreetAddress(String address) {
		dsl.write(streetAddress, address);
	}

	public void selectCountry(String country) {
		driver.findElement(this.country).findElements(By.tagName("option")).get(1).click();
	}

	public void typeZipCode(String zipCode) {
		dsl.write(this.zipCode, zipCode);
	}

	public void typeCity(String city) {
		dsl.write(this.city, city);
	}

	public void selectOccupation(String option) {
		driver.findElement(occupation).findElements(By.tagName("option")).get(1).click();
	}

	public void selectHobbies(String hobbie) {

		ArrayList<WebElement> hobbies = (ArrayList<WebElement>) driver.findElement(groupHobbies)
				.findElements(By.tagName("label"));

		hobbies.forEach(e -> e.click());

	}

	public void typeWebSite(String site) {
		driver.findElement(website).sendKeys(site);
	}

	public void typePicture() {
		driver.findElement(picture).sendKeys("c://");
	}

	public void clickNext() {
		driver.findElement(nextEnterProductdata).click();
	}

	// Enter Product Data

	public void typeStartDate(String date) {
		driver.findElement(startDate).sendKeys(date);
	}

	public void selectInsuranceSum(String option) {
		driver.findElement(insuranceSum).findElements(By.tagName("option")).get(1).click();
	}

	public void selectMeritRating(String option) {
		boolean find = false;
		ArrayList<WebElement> selectMerit = (ArrayList<WebElement>) driver.findElement(meritRating)
				.findElements(By.tagName("option"));
		for (int i = 0; i < selectMerit.size(); i++) {

			if (selectMerit.get(i).getText().equalsIgnoreCase(option)) {
				selectMerit.get(i).click();
				find = true;

			}
		}
		assertEquals("not contains", true, find);
	}

	public void selectDamageInsurance(String option) {
		driver.findElement(damageInsurance).findElements(By.tagName("option")).get(1).click();
	}

	public void selectOptionalProduct() {
		ArrayList<WebElement> optionalProducts = (ArrayList<WebElement>) driver.findElement(GroupOptionalProduct)
				.findElements(By.tagName("label"));

		optionalProducts.forEach(e -> e.click());

	}

	public void selectCourstesyCar(String option) {
		driver.findElement(courtesyCar).findElements(By.tagName("option")).get(1).click();
	}

	public void clickNext1() {
		driver.findElement(nextSelectpriceOption).click();
	}

	// Select Price Option

	public void selectPriceOption(String option) {

		ArrayList<WebElement> priceOption = (ArrayList<WebElement>) driver
				.findElement(By.xpath("//*[@id=\"priceTable\"]/thead/tr")).findElements(By.xpath("th"));
		int position = 0;
		for (int i = 0; i < priceOption.size(); i++) {

			if (priceOption.get(i).getText().equals(option)) {

				position = i;
			}
		}

		driver.findElement(By.xpath("//*[@id=\"priceTable\"]/tfoot/tr/th[2]/label" + "[" + position + "]")).click();

	}

	public void NextSend() {
		driver.findElement(nextSendquote).click();
	}

	public void typeEmail(String email) {
		driver.findElement(this.email).sendKeys(email);
	}

	public void typePhone(String phone) {
		driver.findElement(this.phone).sendKeys(phone);
	}

	public void typeUsername(String userName) {
		driver.findElement(this.userName).sendKeys(userName);
	}

	public void typePassword(String password) {
		driver.findElement(this.password).sendKeys(password);
	}

	public void typeConfirmPassword(String password) {
		driver.findElement(confirmPassword).sendKeys(password);
	}

	public void typeComments(String comments) {
		driver.findElement(this.comments).sendKeys(comments);
	}

	public void sendEmail() {
		driver.findElement(sendEmail).click();
	}

	public void confirmMensagem() {
		WebDriverWait wait = new WebDriverWait(driver, 10);
		wait.until(ExpectedConditions.invisibilityOfElementLocated(By.id("LoadingPDF")));
		assertEquals("Sending e-mail success!", driver.findElement(mensagem).getText());
		closeDriver();
	}

}
